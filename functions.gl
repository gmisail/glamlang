let sum : (int, int) -> int = fn(bugs:int, bunny:int): int => {
	return bugs + bunny
}

type Account {
	balance: float
	name: string
	is_overdrawn: bool
	linked_account: Account
}

type Node {
	line: int
}

type Type {
	base: string
}

type Expression(Node) {
	expressionType: Type
}

type Statement(Node) {

}

let x : int = { name: "graham", age: 21 }

let create_bank : () -> Bank = fn(): Bank => {
	return 0
}

let bank : Bank = create_bank()

let mul : (int, int) -> int = fn(bugs:int, bunny:int): int => {
	if bugs == 0 {
        while true {
            if 0 == 0 {
                return 10
            } else if 10 == 10 {
                let z : int = 5
                let y : int = 1

                return z * y 
            }

            sum(10, 10)

            return 0
        }
    }

    if bugs == 0 {
        return 100 
    }

    if bugs == 0
        return 0

	return bugs * bunny 
}

let play_song : (string, Album) -> bool =
fn (song: string, album: Album): bool => {
	if album.song != song {
		return false
	}
	
	return true
}

let a : Album
let song : string = "AMAZING"
play_song(song, a)
play_song(a, song)

let opt : int? = mul(10, 10)
