let x : int = 100
let y : bool = false
let z : string = "hello world"
let PI : float = 3.14

let E : float = true

let is_pi_greater : bool = PI < 0.32
let invalid_comp : bool = PI * 10
let valid_comp : float = PI * 10.0

let advanced_comp : bool = ((10.0 != 5.0) == ((PI > 4.0) != false))

if !is_pi_greater {

}

let not_pi_greater : bool = !is_pi_greater

while PI < 0.1 and PI > 4.0 {

}

if E != true {
	
}

while true {

}

if is_pi_greater {
	
}

if valid_comp {

}

while is_pi_greater != false {

}

while valid_comp {

}

struct Account {
	balance: float
	name: string
	is_overdrawn: bool
	linked_account: Account
}

let sum : (int, int) -> int = fun(bugs:int, bunny:int): int => {
	return bugs + bunny
}

let comp : (bool, int) -> bool = fun(cats: int): bool => {

}

let account : Account
account.balance
account.fees

let add : (int, int) -> int
let div : (int, int) -> float
let max : (int, int, int) -> int

if sum == add {

}

if div == add {

}

if max == add {

}

let num : int = sum(10, 15)
let another_num : int = sum(10.0, "hello")

let embedded : int = sum(sum(10, 10), 10)
